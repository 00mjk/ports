$OpenBSD: patch-boost_coroutine_standard_stack_allocator_hpp,v 1.4 2022/01/06 08:15:51 rsadowski Exp $

Use mmap(2) MAP_STACK to allocate stacks on OpenBSD
f7a340547874158567285427a79b84067b3abf20

Index: boost/coroutine/standard_stack_allocator.hpp
--- boost/coroutine/standard_stack_allocator.hpp.orig
+++ boost/coroutine/standard_stack_allocator.hpp
@@ -22,6 +22,12 @@
 #include <boost/coroutine/stack_context.hpp>
 #include <boost/coroutine/stack_traits.hpp>
 
+#if defined(BOOST_COROUTINES_USE_MAP_STACK)
+extern "C" {
+#include <sys/mman.h>
+}
+#endif
+
 #ifdef BOOST_HAS_ABI_HEADERS
 #  include BOOST_ABI_PREFIX
 #endif
@@ -39,9 +45,16 @@ struct basic_standard_stack_allocator
         BOOST_ASSERT( traits_type::minimum_size() <= size);
         BOOST_ASSERT( traits_type::is_unbounded() || ( traits_type::maximum_size() >= size) );
 
-        void * limit = std::malloc( size);
-        if ( ! limit) throw std::bad_alloc();
+#if defined(BOOST_COROUTINES_USE_MAP_STACK)
+        void * limit = ::mmap(0, size, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANON | MAP_STACK, -1, 0);
+        if ( limit == MAP_FAILED ) throw std::bad_alloc();
+#else
+         void * limit = std::malloc( size);
+         if ( ! limit) throw std::bad_alloc();
+#endif
 
+        if ( limit == MAP_FAILED ) throw std::bad_alloc();
+
         ctx.size = size;
         ctx.sp = static_cast< char * >( limit) + ctx.size;
 #if defined(BOOST_USE_VALGRIND)
@@ -60,7 +73,11 @@ struct basic_standard_stack_allocator
 #endif
 
         void * limit = static_cast< char * >( ctx.sp) - ctx.size;
+#if defined(BOOST_COROUTINES_USE_MAP_STACK)
+        munmap(limit, ctx.size);
+#else
         std::free( limit);
+#endif
     }
 };
 
