$OpenBSD: patch-src_hotspot_cpu_aarch64_register_aarch64_hpp,v 1.1 2022/01/08 15:05:30 kurt Exp $

Work around using 'this' as a tagged pointer by preventing optimization
with clang 13.

Index: src/hotspot/cpu/aarch64/register_aarch64.hpp
--- src/hotspot/cpu/aarch64/register_aarch64.hpp.orig
+++ src/hotspot/cpu/aarch64/register_aarch64.hpp
@@ -58,10 +58,16 @@ class RegisterImpl: public AbstractRegisterImpl {
   VMReg as_VMReg();
 
   // accessors
+#if defined(__clang_major__) && (__clang_major__ >= 13)
+  NOINLINE
+#endif
   int   encoding() const                         { assert(is_valid(), "invalid register"); return (intptr_t)this; }
   bool  is_valid() const                         { return 0 <= (intptr_t)this && (intptr_t)this < number_of_registers; }
   bool  has_byte_register() const                { return 0 <= (intptr_t)this && (intptr_t)this < number_of_byte_registers; }
   const char* name() const;
+#if defined(__clang_major__) && (__clang_major__ >= 13)
+  NOINLINE
+#endif
   int   encoding_nocheck() const                 { return (intptr_t)this; }
 };
 
@@ -152,7 +158,13 @@ class FloatRegisterImpl: public AbstractRegisterImpl {
   FloatRegister successor() const                          { return as_FloatRegister((encoding() + 1) % 32); }
 
   // accessors
+#if defined(__clang_major__) && (__clang_major__ >= 13)
+  NOINLINE
+#endif
   int   encoding() const                          { assert(is_valid(), "invalid register"); return (intptr_t)this; }
+#if defined(__clang_major__) && (__clang_major__ >= 13)
+  NOINLINE
+#endif
   int   encoding_nocheck() const                         { return (intptr_t)this; }
   bool  is_valid() const                          { return 0 <= (intptr_t)this && (intptr_t)this < number_of_registers; }
   const char* name() const;
@@ -254,7 +266,13 @@ class PRegisterImpl: public AbstractRegisterImpl {
   PRegister successor() const     { return as_PRegister(encoding() + 1); }
 
   // accessors
+#if defined(__clang_major__) && (__clang_major__ >= 13)
+  NOINLINE
+#endif
   int   encoding() const          { assert(is_valid(), "invalid register"); return (intptr_t)this; }
+#if defined(__clang_major__) && (__clang_major__ >= 13)
+  NOINLINE
+#endif
   int   encoding_nocheck() const  { return (intptr_t)this; }
   bool  is_valid() const          { return 0 <= (intptr_t)this && (intptr_t)this < number_of_registers; }
   const char* name() const;
