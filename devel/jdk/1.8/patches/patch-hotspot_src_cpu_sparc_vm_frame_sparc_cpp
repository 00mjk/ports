$OpenBSD: patch-hotspot_src_cpu_sparc_vm_frame_sparc_cpp,v 1.1 2021/07/15 10:28:30 kurt Exp $

Add sparc64 support

Index: hotspot/src/cpu/sparc/vm/frame_sparc.cpp
--- hotspot/src/cpu/sparc/vm/frame_sparc.cpp.orig
+++ hotspot/src/cpu/sparc/vm/frame_sparc.cpp
@@ -174,6 +174,14 @@ void RegisterMap::shift_individual_registers() {
   check_location_valid();
 }
 
+address frame::sender_pc() const {
+#ifdef STACKGHOST
+  return (address)((intptr_t)(*I7_addr() + pc_return_offset) ^ sg_cookie());
+#else
+  return (*I7_addr() + pc_return_offset);
+#endif
+}
+
 bool frame::safe_for_sender(JavaThread *thread) {
 
   address _SP = (address) sp();
@@ -243,7 +251,12 @@ bool frame::safe_for_sender(JavaThread *thread) {
     intptr_t* _SENDER_SP = sender_sp(); // sender is actually just _FP
     bool adjusted_stack = is_interpreted_frame();
 
+#ifdef STACKGHOST
+    address   sender_pc = (address)younger_sp[I7->sp_offset_in_saved_window()];
+    sender_pc = (address)((intptr_t)sender_pc ^ sg_cookie()) + pc_return_offset;
+#else
     address   sender_pc = (address)younger_sp[I7->sp_offset_in_saved_window()] + pc_return_offset;
+#endif
 
 
     // We must always be able to find a recognizable pc
@@ -378,7 +391,12 @@ frame::frame(intptr_t* sp, intptr_t* younger_sp, bool 
     _pc = NULL;
     _cb = NULL;
   } else {
+#ifdef STACKGHOST
+    _pc = (address)younger_sp[I7->sp_offset_in_saved_window()];
+    _pc = (address)((intptr_t)_pc ^ sg_cookie()) + pc_return_offset;
+#else
     _pc = (address)younger_sp[I7->sp_offset_in_saved_window()] + pc_return_offset;
+#endif
     assert( (intptr_t*)younger_sp[FP->sp_offset_in_saved_window()] == (intptr_t*)((intptr_t)sp - STACK_BIAS), "younger_sp must be valid");
     // Any frame we ever build should always "safe" therefore we should not have to call
     // find_blob_unsafe
@@ -545,7 +563,11 @@ void frame::patch_pc(Thread* thread, address pc) {
     tty->print_cr("patch_pc at address  0x%x [0x%x -> 0x%x] ", O7_addr(), _pc, pc);
   }
   _cb = CodeCache::find_blob(pc);
+#ifdef STACKGHOST
+  *O7_addr() = (address)((uintptr_t)(pc - pc_return_offset) ^ sg_cookie());
+#else
   *O7_addr() = pc - pc_return_offset;
+#endif
   _cb = CodeCache::find_blob(_pc);
   address original_pc = nmethod::get_deopt_original_pc(this);
   if (original_pc != NULL) {
@@ -691,7 +713,12 @@ void JavaFrameAnchor::capture_last_Java_pc(intptr_t* s
     // Really this should never fail otherwise VM call must have non-standard
     // frame linkage (bad) or stack is not properly flushed (worse).
     guarantee(_post_Java_sp != NULL, "bad stack!");
+#ifdef STACKGHOST
+    _last_Java_pc = (address) _post_Java_sp[ I7->sp_offset_in_saved_window()];
+    _last_Java_pc = (address)((intptr_t)_last_Java_pc ^ sg_cookie()) + frame::pc_return_offset;
+#else
     _last_Java_pc = (address) _post_Java_sp[ I7->sp_offset_in_saved_window()] + frame::pc_return_offset;
+#endif
 
   }
   set_window_flushed();
