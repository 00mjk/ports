$OpenBSD: patch-make_hotspot_lib_JvmOverrideFiles_gmk,v 1.4 2022/01/05 23:15:48 kurt Exp $

The jdk uses tagged pointers on 'this' which clang knows to
be aligned and then optimizes away the tags. Reduce optimization
levels to address this and avoid segfaults with clang 13.

Index: make/hotspot/lib/JvmOverrideFiles.gmk
--- make/hotspot/lib/JvmOverrideFiles.gmk.orig
+++ make/hotspot/lib/JvmOverrideFiles.gmk
@@ -210,14 +210,6 @@ else ifeq ($(OPENJDK_TARGET_OS), bsd)
   endif
 
   ifeq ($(TOOLCHAIN_TYPE), clang)
-    ifeq ($(OPENJDK_TARGET_CPU), x86)
-      ifneq ($(DEBUG_LEVEL), slowdebug)
-        # hotspot/jtreg/compiler/c2/Test8062950.java test fails on x86
-        # with clang when parse2.cpp is optimized above -O1
-        BUILD_LIBJVM_parse2.cpp_CXXFLAGS := -O1
-      endif
-    endif
-
     # The following files are compiled at various optimization
     # levels due to optimization issues encountered at the
     # default level. The Clang compiler issues a compile
@@ -233,14 +225,47 @@ else ifeq ($(OPENJDK_TARGET_OS), bsd)
         sharedRuntimeTrans.cpp \
         loopTransform.cpp \
         unsafe.cpp \
-        parse2.cpp \
         #
 
-    ifeq ($(OPENJDK_TARGET_CPU), aarch64)
+    ifneq ($(DEBUG_LEVEL), slowdebug)
+      # needed for clang 13
+      BUILD_LIBJVM_synchronizer.cpp_CXXFLAGS := -O1
+
       JVM_PRECOMPILED_HEADER_EXCLUDE += \
-          memnode.cpp
+          synchronizer.cpp \
           #
-      BUILD_LIBJVM_memnode.cpp_CXXFLAGS := -O0
+
+      ifeq ($(OPENJDK_TARGET_CPU), x86)
+        # hotspot/jtreg/compiler/c2/Test8062950.java test fails on x86
+        # with clang when parse2.cpp is optimized above -O1
+        BUILD_LIBJVM_parse2.cpp_CXXFLAGS := -O1
+
+        # needed for clang 13
+        BUILD_LIBJVM_vmreg_x86.cpp_CXXFLAGS := -O1
+
+        JVM_PRECOMPILED_HEADER_EXCLUDE += \
+            parse2.cpp \
+            vmreg_x86.cpp \
+            #
+      endif
+      ifeq ($(OPENJDK_TARGET_CPU), x86_64)
+        # needed for clang 13
+        BUILD_LIBJVM_vmreg_x86.cpp_CXXFLAGS := -O1
+
+        JVM_PRECOMPILED_HEADER_EXCLUDE += \
+            vmreg_x86.cpp \
+            #
+      endif
+      ifeq ($(OPENJDK_TARGET_CPU), aarch64)
+        BUILD_LIBJVM_memnode.cpp_CXXFLAGS := -O0
+        # needed for clang 13
+        BUILD_LIBJVM_immediate_$(HOTSPOT_TARGET_CPU).cpp_CXXFLAGS := -O1
+
+        JVM_PRECOMPILED_HEADER_EXCLUDE += \
+            memnode.cpp \
+            immediate_$(HOTSPOT_TARGET_CPU).cpp \
+          #
+      endif
     endif
   endif
 
