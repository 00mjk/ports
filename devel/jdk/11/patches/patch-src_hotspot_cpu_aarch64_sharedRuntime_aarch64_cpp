$OpenBSD: patch-src_hotspot_cpu_aarch64_sharedRuntime_aarch64_cpp,v 1.1 2021/10/31 21:16:41 kurt Exp $

Fix implicit conversion failures from:
	uintptr_t -> uint64_t

Index: src/hotspot/cpu/aarch64/sharedRuntime_aarch64.cpp
--- src/hotspot/cpu/aarch64/sharedRuntime_aarch64.cpp.orig
+++ src/hotspot/cpu/aarch64/sharedRuntime_aarch64.cpp
@@ -1126,7 +1126,7 @@ static void verify_oop_args(MacroAssembler* masm,
         VMReg r = regs[i].first();
         assert(r->is_valid(), "bad oop arg");
         if (r->is_stack()) {
-          __ ldr(temp_reg, Address(sp, r->reg2stack() * VMRegImpl::stack_slot_size));
+          __ ldr(temp_reg, Address(sp, (uint64_t)(r->reg2stack() * VMRegImpl::stack_slot_size)));
           __ verify_oop(temp_reg);
         } else {
           __ verify_oop(r->as_Register());
@@ -1164,7 +1164,7 @@ static void gen_special_dispatch(MacroAssembler* masm,
     SharedRuntime::check_member_name_argument_is_last_argument(method, sig_bt, regs);
     VMReg r = regs[member_arg_pos].first();
     if (r->is_stack()) {
-      __ ldr(member_reg, Address(sp, r->reg2stack() * VMRegImpl::stack_slot_size));
+      __ ldr(member_reg, Address(sp, (uint64_t)(r->reg2stack() * VMRegImpl::stack_slot_size)));
     } else {
       // no data motion is needed
       member_reg = r->as_Register();
@@ -1183,7 +1183,7 @@ static void gen_special_dispatch(MacroAssembler* masm,
       // platform, pick a temp and load the receiver from stack.
       fatal("receiver always in a register");
       receiver_reg = r2;  // known to be free at this point
-      __ ldr(receiver_reg, Address(sp, r->reg2stack() * VMRegImpl::stack_slot_size));
+      __ ldr(receiver_reg, Address(sp, (uint64_t)(r->reg2stack() * VMRegImpl::stack_slot_size)));
     } else {
       // no data motion is needed
       receiver_reg = r->as_Register();
