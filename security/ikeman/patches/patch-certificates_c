$OpenBSD: patch-certificates_c,v 1.1 2021/10/11 12:05:26 tb Exp $

Index: certificates.c
--- certificates.c.orig
+++ certificates.c
@@ -141,10 +141,11 @@ fail:
 static int
 ca_x509_subjectaltname(X509 *cert, unsigned char **altname, size_t *len)
 {
-	X509_EXTENSION	*san;
-	u_int8_t	*data;
-	int		 ext, santype;
-	size_t		 sanlen;
+	X509_EXTENSION		*san;
+	u_int8_t		*data;
+	ASN1_OCTET_STRING	*ostr;
+	int			 ext, santype;
+	size_t			 sanlen;
 
 	if ((ext = X509_get_ext_by_NID(cert, NID_subject_alt_name, -1)) == -1
 	    || (san = X509_get_ext(cert, ext)) == NULL) {
@@ -152,21 +153,21 @@ ca_x509_subjectaltname(X509 *cert, unsigned char **alt
 		    __func__);
 		return (ALTNAME_FAIL);
 	}
+	ostr = X509_EXTENSION_get_data(san);
 
-	if (san->value == NULL || san->value->data == NULL ||
-	    san->value->length < 4) {
+	if (ostr == NULL || ostr->data == NULL || ostr->length < 4) {
 		log_debug("%s: invalid subjectAltName in certificate",
 		    __func__);
 		return (ALTNAME_FAIL);
 	}
 
-	data = san->value->data;
+	data = ostr->data;
 	santype = data[2] & 0x3f;
 	sanlen = data[3];
 	/* skip over header */
 	data += 4;
 
-	if ((sanlen + 4) > (size_t)san->value->length) {
+	if ((sanlen + 4) > (size_t)ostr->length) {
 		log_debug("%s: invalid subjectAltName length", __func__);
 		return (ALTNAME_FAIL);
 	}
@@ -263,8 +264,8 @@ fill_crl_attributes(X509_CRL *crl, struct ikeman_crl_a
 		/* LINTED BAD_BAD_OPENSSL */
 		r = sk_X509_REVOKED_value(rev, i);
 		rc[i].revocation_date =
-		    asn1_time_to_timestamp(r->revocationDate);	
-		rc[i].serial_number = i2s_ASN1_INTEGER(NULL, r->serialNumber);
+		    asn1_time_to_timestamp(X509_REVOKED_get0_revocationDate(r));
+		rc[i].serial_number = i2s_ASN1_INTEGER(NULL, X509_REVOKED_get0_serialNumber(r));
 	}
 
 	at->revoked_certs = rc;
@@ -327,7 +328,7 @@ ca_sign_csr(char *csrpath, char *certpath, struct ikem
 
 	if (X509_set_issuer_name(cert, X509_get_subject_name(ca->x509)) == 0)
 		ERROR("couldn't set issuer's name");
-	if (X509_set_subject_name(cert, req->req_info->subject) == 0)
+	if (X509_set_subject_name(cert, X509_REQ_get_subject_name(req)) == 0)
 		ERROR("couldn't set subject's name");
 
 	if (ca_new_serial_number(ca, X509_get_serialNumber(cert)) == 0)
@@ -768,7 +769,7 @@ ca_load(const char *ca_dir, const char *crl_dir, const
 {
 	DIR			*dir;
 	struct dirent		*entry;
-	char			 file[PATH_MAX], *subjname;
+	char			 file[PATH_MAX], *certname, *subjname;
 	STACK_OF(X509_OBJECT)	*h;
 	X509_STORE_CTX		csc;
 	X509_STORE		*st;
@@ -813,7 +814,7 @@ ca_load(const char *ca_dir, const char *crl_dir, const
 			ERROR("fill_ca");
 
 		log_debug("%s: loaded ca %s from file %s", __func__,
-		    ca->x509->name, entry->d_name);
+		    X509_get_subject_name(ca->x509), entry->d_name);
 	}
 	if (closedir(dir) == -1)
 		ERROR(strerror(errno));
@@ -849,11 +850,17 @@ ca_load(const char *ca_dir, const char *crl_dir, const
 		/* LINTED BAD_BAD_OPENSSL */
 		xo = sk_X509_OBJECT_value(h, sk_X509_OBJECT_num(h) - 1);
 		SLIST_FOREACH(ca, &cas, cas) {
-			subjname = X509_NAME_oneline(xo->data.crl->crl->issuer,
+			certname = X509_NAME_oneline(X509_get_subject_name(ca->x509), NULL, 0);
+			subjname = X509_NAME_oneline(X509_CRL_get_issuer(xo->data.crl),
 			    NULL, 0);
 
+			if (certname == NULL || subjname == NULL) {
+				OPENSSL_free(certname);
+				OPENSSL_free(subjname);
+				continue;
+			}
 			/* Try matching by issuer's name, then make sure */ 
-			if (!strcmp(ca->x509->name, subjname) &&
+			if (!strcmp(certname, subjname) &&
 			    crl_matching_ca(xo->data.crl, ca->x509) > 0) {
 				ca->num_crls_ok++;
 
@@ -873,9 +880,11 @@ ca_load(const char *ca_dir, const char *crl_dir, const
 				fill_crl_attributes(crl->x509, crl->attrs);
 
 				/* got it, go after next CRL */
+				OPENSSL_free(certname);
 				OPENSSL_free(subjname);
 				break;
 			}
+			OPENSSL_free(certname);
 			OPENSSL_free(subjname);
 		}
 		if (ca)
