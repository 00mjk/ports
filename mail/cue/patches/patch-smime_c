$OpenBSD: patch-smime_c,v 1.3 2021/10/25 15:42:13 tb Exp $

Index: smime.c
--- smime.c.orig
+++ smime.c
@@ -95,13 +95,13 @@ static int
 smime_decrypt(struct state *state)
 {
 	int i;
-	PKCS7 *p7;
+	PKCS7 *p7 = NULL;
 	const char *p, *s, *ep;
 	BIO *in, *p7bio;
 	EVP_PKEY *pkey;
-	X509 *x509;
-	X509_STORE_CTX cert_ctx;
-	X509_STORE *cert_store;
+	X509 *x509 = NULL;
+	X509_STORE_CTX *cert_ctx = NULL;
+	X509_STORE *cert_store = NULL;
 	struct filedb *fdb, *edb;
 	struct abuf abuf;
 	cbuf_t cbuf;
@@ -233,12 +233,15 @@ smime_decrypt(struct state *state)
 	}
 
 	cert_store = X509_STORE_new();
+	cert_ctx = X509_STORE_CTX_new();
+	if (cert_store == NULL || cert_ctx == NULL)
+		goto end;
 	X509_STORE_set_default_paths(cert_store);
 	X509_STORE_load_locations(cert_store, getenv("SSL_CLIENT_CERT"),
 	    getenv("SSL_CERT_DIR"));
-	X509_STORE_CTX_init(&cert_ctx, cert_store, x509, NULL);
+	X509_STORE_CTX_init(cert_ctx, cert_store, x509, NULL);
 #if OPENSSL_VERSION_NUMBER >= 0x00906000
-	X509_STORE_CTX_set_time(&cert_ctx, 0,
+	X509_STORE_CTX_set_time(cert_ctx, 0,
 	    state->folder->msg[state->folder->pos].date);
 #endif
 
@@ -305,6 +308,7 @@ smime_decrypt(struct state *state)
 
   end:
 	X509_STORE_free(cert_store);
+	X509_STORE_CTX_free(cert_ctx);
 	X509_free(x509);
 	PKCS7_free(p7);
 	return -1;
@@ -404,14 +408,14 @@ smime_verify(struct state *state)
 	ccbuf_t cbuf, from;
 	ccbuf_t *ccb, sproto;
 	int i, ret;
-	PKCS7 *p7;
+	PKCS7 *p7 = NULL;
 	STACK_OF(PKCS7_SIGNER_INFO) *sk;
 	const char *p, *ep;
-	BIO *detached, *p7bio;
+	BIO *detached = NULL, *p7bio = NULL;
 	PKCS7_SIGNER_INFO *si;
 	char buf[BUFSIZ];
-	X509_STORE_CTX cert_ctx;
-	X509_STORE *cert_store;
+	X509_STORE_CTX *cert_ctx = NULL;
+	X509_STORE *cert_store = NULL;
 	ASN1_UTCTIME *tm;
 	struct sarg sarg;
 
@@ -495,6 +499,10 @@ BIO_read_filename(detached, "/tmp/smime.txt");
 		;
 
 	cert_store = X509_STORE_new();
+	cert_ctx = X509_STORE_CTX_new();
+	if (cert_store == NULL || cert_ctx == NULL)
+		goto end;
+
 	X509_STORE_set_default_paths(cert_store);
 	X509_STORE_load_locations(cert_store, getenv("SSL_CLIENT_CERT"),
 	    getenv("SSL_CERT_DIR"));
@@ -505,15 +513,16 @@ BIO_read_filename(detached, "/tmp/smime.txt");
 	ret = 1;
 	for (i = 0; i < sk_PKCS7_SIGNER_INFO_num(sk); i++) {
 		si = sk_PKCS7_SIGNER_INFO_value(sk, i);
-		if (PKCS7_dataVerify(cert_store, &cert_ctx, p7bio, p7, si) <= 0) {
+		if (PKCS7_dataVerify(cert_store, cert_ctx, p7bio, p7, si) <= 0) {
+			int error;
 			ret = -1;
+			error = X509_STORE_CTX_get_error(cert_ctx);
 			snprintf(state->status, sizeof(state->status),
 			    "S/MIME verify failed: %s",
-			    cert_ctx.error ?
-			    X509_verify_cert_error_string(cert_ctx.error) :
+			    error ? X509_verify_cert_error_string(error) :
 			    "signature failure");
-			if (cert_ctx.error == X509_V_ERR_CERT_HAS_EXPIRED) {
-				tm = X509_get_notAfter(cert_ctx.current_cert);
+			if (error == X509_V_ERR_CERT_HAS_EXPIRED) {
+				tm = X509_get_notAfter(X509_STORE_CTX_get_current_cert(cert_ctx));
 				snprintf(state->status + strlen(state->status),
 				    sizeof(state->status) - strlen(state->status),
 				    ": %.*s", tm->length, tm->data);
@@ -523,7 +532,7 @@ BIO_read_filename(detached, "/tmp/smime.txt");
 #endif
 		} else {
 			if (i == 0) {	/* XXX: ??? */
-				p = smime_x509_email(cert_ctx.current_cert);
+				p = smime_x509_email(X509_STORE_CTX_get_current_cert(cert_ctx));
 				if (p == NULL
 				||  strlen(p) != CL(&from)
 				||  strncasecmp(p, CP(&from), CL(&from)) != 0) {
@@ -547,7 +556,9 @@ BIO_read_filename(detached, "/tmp/smime.txt");
 			}
 		}
 	}
+end:
 	X509_STORE_free(cert_store);
+	X509_STORE_CTX_free(cert_ctx);
 	BIO_free(p7bio);
 	BIO_free(detached);
 	PKCS7_free(p7);
@@ -566,12 +577,12 @@ smime_sign(struct state *state)
 	PKCS7 *p7;
 	STACK_OF(X509) *sk;
 	char *p;
-	BIO *in, *p7bio;
+	BIO *in = NULL, *p7bio = NULL;
 	PKCS7_SIGNER_INFO *si;
 	EVP_PKEY *pkey;
-	X509 *x509, *x;
-	X509_STORE_CTX cert_ctx;
-	X509_STORE *cert_store;
+	X509 *x509 = NULL, *x;
+	X509_STORE_CTX *cert_ctx = NULL;
+	X509_STORE *cert_store = NULL;
 	ASN1_UTCTIME *sign_time;
 	struct filedb *fdb;
 	struct sarg sarg;
@@ -666,21 +677,24 @@ smime_sign(struct state *state)
 	PKCS7_add_signed_attribute(si, NID_pkcs9_signingTime, V_ASN1_UTCTIME,(char *)sign_time);
 
 	cert_store = X509_STORE_new();
+	cert_ctx = X509_STORE_CTX_new();
+	if (cert_store == NULL || cert_ctx == NULL)
+		goto end;
 	X509_STORE_set_default_paths(cert_store);
 	X509_STORE_load_locations(cert_store, getenv("SSL_CLIENT_CERT"),
 	    getenv("SSL_CERT_DIR"));
-	X509_STORE_CTX_init(&cert_ctx, cert_store, x509, NULL);
+	X509_STORE_CTX_init(cert_ctx, cert_store, x509, NULL);
 	ERR_clear_error();
-	if (X509_verify_cert(&cert_ctx) <= 0) {
+	if (X509_verify_cert(cert_ctx) <= 0) {
 		snprintf(state->status, sizeof(state->status),
 		    "Failed to verify my certificate: %s",
-		    X509_verify_cert_error_string(X509_STORE_CTX_get_error(&cert_ctx)));
+		    X509_verify_cert_error_string(X509_STORE_CTX_get_error(cert_ctx)));
 		X509_STORE_free(cert_store);
 		X509_free(x509);
 		PKCS7_free(p7);
 		return 0;
 	}
-	sk = X509_STORE_CTX_get_chain(&cert_ctx);
+	sk = X509_STORE_CTX_get_chain(cert_ctx);
 	for (i = 0; i < sk_X509_num(sk); i++) {
 		x = sk_X509_value(sk, i);
 		PKCS7_add_certificate(p7, x);
@@ -711,9 +725,11 @@ smime_sign(struct state *state)
 #ifdef SMIME_DEBUG
  { FILE *fp = fopen("/tmp/smime.p7s", "w"); i2d_PKCS7_fp(fp, p7); fclose(fp); }
 #endif
+end:
 	BIO_free(p7bio);
 	PKCS7_free(p7);
 	X509_STORE_free(cert_store);
+	X509_STORE_CTX_free(cert_ctx);
 	X509_free(x509);
 	return 1;
 }
