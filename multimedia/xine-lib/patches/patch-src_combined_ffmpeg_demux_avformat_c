- ffmpeg 4 compatibility attempt.
  4e5ad7ebed6111ba9e1ea2eab4a6b94477b066a8
- Fix avformat.
  6087f17933a15a0fee6a1ba58dc3a65841cf6232

Index: src/combined/ffmpeg/demux_avformat.c
--- src/combined/ffmpeg/demux_avformat.c.orig
+++ src/combined/ffmpeg/demux_avformat.c
@@ -27,6 +27,7 @@
 #include <stdlib.h>
 #include <string.h>
 #include <pthread.h>
+#include <errno.h>
 
 #include <libavformat/avformat.h>
 #include <libavformat/avio.h>
@@ -543,28 +544,28 @@ static int send_avpacket(avformat_demux_plugin_t *this
 {
   int64_t  stream_pos    = avio_tell(this->fmt_ctx->pb);
   int64_t  stream_length = avio_size(this->fmt_ctx->pb);
-  AVPacket pkt;
+  XFF_PACKET_DECL (pkt);
   uint32_t buffer_type = 0;
   fifo_buffer_t *fifo = NULL;
 
-  av_init_packet(&pkt);
-  pkt.data = NULL;
-  pkt.size = 0;
+  XFF_PACKET_NEW (pkt);
+  pkt->data = NULL;
+  pkt->size = 0;
 
   /* read frame from the file */
-  if (av_read_frame(this->fmt_ctx, &pkt) < 0) {
+  if (av_read_frame(this->fmt_ctx, pkt) < 0) {
     xprintf (this->stream->xine, XINE_VERBOSITY_LOG, LOG_MODULE": av_read_frame() failed\n");
     return -1;
   }
 
   /* map to xine fifo / buffer type */
-  if (pkt.stream_index >= 0 && (unsigned)pkt.stream_index < this->num_streams) {
-    buffer_type = this->xine_buf_type[pkt.stream_index];
+  if (pkt->stream_index >= 0 && (unsigned)pkt->stream_index < this->num_streams) {
+    buffer_type = this->xine_buf_type [pkt->stream_index];
   } else {
     // TODO: new streams found
   }
 
-  if (this->video_stream_idx >= 0 && pkt.stream_index == this->video_stream_idx) {
+  if (this->video_stream_idx >= 0 && pkt->stream_index == this->video_stream_idx) {
     fifo = this->stream->video_fifo;
   } else {
     fifo = this->stream->audio_fifo;
@@ -577,17 +578,17 @@ static int send_avpacket(avformat_demux_plugin_t *this
     int      total_time    = (int)((int64_t)this->fmt_ctx->duration * 1000 / AV_TIME_BASE);
     int      input_time    = input_normpos * total_time / 65535;
 
-    if (pkt.pts != AV_NOPTS_VALUE) {
-      AVStream *stream = this->fmt_ctx->streams[pkt.stream_index];
-      pts = (int64_t)(pkt.pts * stream->time_base.num * 90000 / stream->time_base.den);
+    if (pkt->pts != AV_NOPTS_VALUE) {
+      AVStream *stream = this->fmt_ctx->streams [pkt->stream_index];
+      pts = (int64_t)(pkt->pts * stream->time_base.num * 90000 / stream->time_base.den);
       check_newpts(this, pts);
     }
 
-    _x_demux_send_data(fifo, pkt.data, pkt.size, pts, buffer_type, 0/*decoder_flags*/,
+    _x_demux_send_data (fifo, pkt->data, pkt->size, pts, buffer_type, 0/*decoder_flags*/,
                        input_normpos, input_time, total_time, 0/*frame_number*/);
   }
 
-  XFF_PACKET_UNREF(&pkt);
+  XFF_PACKET_UNREF (pkt);
 
   return 1;
 }
@@ -749,11 +750,23 @@ static void demux_avformat_dispose (demux_plugin_t *th
 
 static int pb_input_read_packet(void *opaque, uint8_t *buf, int buf_size) {
   input_plugin_t *input = (input_plugin_t *)opaque;
-  return input->read(input, buf, buf_size);
+  int r = input->read (input, buf, buf_size);
+  /* avoid eternal misunderstanding :-O */
+  if (r > 0)
+    return r;
+  if (r == 0) {
+#ifdef AVERROR_EOF
+    return AVERROR_EOF;
+#else
+    return 0;
+#endif
+  }
+  return AVERROR (errno);
 }
 
 static int64_t pb_input_seek(void *opaque, int64_t offset, int whence) {
   input_plugin_t *input = (input_plugin_t *)opaque;
+  int64_t r;
 
   if (whence == AVSEEK_SIZE) {
     off_t len = input->get_length(input);
@@ -762,7 +775,10 @@ static int64_t pb_input_seek(void *opaque, int64_t off
     return -1;
   }
 
-  return input->seek(input, offset, whence);
+  r = input->seek (input, offset, whence);
+  if (r >= 0)
+    return r;
+  return AVERROR (errno);
 }
 
 static AVIOContext *get_io_context(xine_stream_t *stream, input_plugin_t *input)
