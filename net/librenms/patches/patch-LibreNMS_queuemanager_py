$OpenBSD: patch-LibreNMS_queuemanager_py,v 1.1 2020/06/01 15:01:25 sthen Exp $

handle mysqlclient *or* pymysql

Index: LibreNMS/queuemanager.py
--- LibreNMS/queuemanager.py.orig
+++ LibreNMS/queuemanager.py
@@ -1,4 +1,3 @@
-import pymysql
 import subprocess
 import threading
 import traceback
@@ -8,6 +7,18 @@ from subprocess import CalledProcessError
 
 import LibreNMS
 
+try:
+    import MySQLdb
+except ImportError:
+    try:
+        import pymysql
+        pymysql.install_as_MySQLdb()
+        import MySQLdb
+    except ImportError as exc:
+        print('ERROR: missing the mysql python module please run:')
+        print('pip install -r requirements.txt')
+        print('ERROR: %s' % exc)
+        sys.exit(2)
 
 class QueueManager:
     def __init__(self, config, lock_manager, type_desc, uses_groups=False, auto_start=True):
@@ -303,7 +314,7 @@ class PingQueueManager(TimedQueueManager):
             groups = self._db.query("SELECT DISTINCT (`poller_group`) FROM `devices`")
             for group in groups:
                 self.post_work('', group[0])
-        except pymysql.err.Error as e:
+        except MySQLdb.err.Error as e:
             critical("DB Exception ({})".format(e))
 
     def do_work(self, context, group):
@@ -332,7 +343,7 @@ class ServicesQueueManager(TimedQueueManager):
                                      " LEFT JOIN `devices` USING (`device_id`) WHERE `disabled`=0")
             for device in devices:
                 self.post_work(device[0], device[1])
-        except pymysql.err.Error as e:
+        except MySQLdb.err.Error as e:
             critical("DB Exception ({})".format(e))
 
     def do_work(self, device_id, group):
@@ -421,7 +432,7 @@ class DiscoveryQueueManager(TimedQueueManager):
             devices = self._db.query("SELECT `device_id`, `poller_group` FROM `devices` WHERE `disabled`=0")
             for device in devices:
                 self.post_work(device[0], device[1])
-        except pymysql.err.Error as e:
+        except MySQLdb.err.Error as e:
             critical("DB Exception ({})".format(e))
 
     def do_work(self, device_id, group):
